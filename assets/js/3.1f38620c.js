(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{265:function(e,t,o){e.exports=o.p+"assets/img/architecture.3e54938d.png"},266:function(e,t,o){e.exports=o.p+"assets/img/web-app.2e16726a.png"},267:function(e,t,o){e.exports=o.p+"assets/img/p2p-connection-manager.93ed8d7a.png"},268:function(e,t,o){e.exports=o.p+"assets/img/escrow-bulk-transactions.05a4c3fe.png"},279:function(e,t,o){"use strict";o.r(t);var r=o(13),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"architecture-and-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#architecture-and-implementation"}},[e._v("#")]),e._v(" Architecture and implementation")]),e._v(" "),t("p",[t("a",{attrs:{href:"#architecture"}},[t("img",{attrs:{src:o(265),alt:"Architecture image"}})])]),e._v(" "),t("h2",{attrs:{id:"vue-js-web-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-web-application"}},[e._v("#")]),e._v(" Vue.js Web Application")]),e._v(" "),t("p",[t("a",{attrs:{href:"#vuejs-web-application"}},[t("img",{attrs:{src:o(266),alt:"Web app image"}})])]),e._v(" "),t("h3",{attrs:{id:"stores"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stores"}},[e._v("#")]),e._v(" Stores")]),e._v(" "),t("p",[e._v("The web application has four stores for state management:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Solid")]),e._v(" - Interacts with Solid protocol functions and Escrow Bulk Transactions Smart Contract functions. Mainly uses "),t("code",[e._v("@inrupt/solid-client")]),e._v(" library for CRUD operations on Solid Pod.")]),e._v(" "),t("li",[t("strong",[e._v("Websocket")]),e._v(" - Interacts with the Websocket server and saves state about connecting users. Also listens for emitted events.")]),e._v(" "),t("li",[t("strong",[e._v("Connection")]),e._v(" - Interacts with the MetaMask browser extension. Handles account changes, account information changes, signature creation, etc.")]),e._v(" "),t("li",[t("strong",[e._v("Blockchain")]),e._v(" - Saves state about current Shop address and balance.")])]),e._v(" "),t("h3",{attrs:{id:"vue-router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[e._v("#")]),e._v(" Vue router")]),e._v(" "),t("p",[e._v("The official router for Vue.js. Imports every view for dynamic routing. Every route has a guard which checks if the user has logged in his Solid Pod and if MetaMask is connected to the web application.")]),e._v(" "),t("h3",{attrs:{id:"app-vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#app-vue"}},[e._v("#")]),e._v(" App.vue")]),e._v(" "),t("p",[e._v("Consists of main navigation bar where the user can go to main pages of the application and a footer with a link to the web application's GitHub repository. When the user is logged in to the Solid Pod and connected to the MetaMask, his WebId and Websocket Server URL is showed on the navigation bar.")]),e._v(" "),t("h3",{attrs:{id:"views"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#views"}},[e._v("#")]),e._v(" Views")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("ActiveOrders.vue")]),e._v(" - Shows products which are purchased from the user and are active (either there is not an agreement between parties or deadline has not passed). There is a refresh button, which pulls active orders from the smart contract and two buttons for order confirmation and for requesting a refund - both of them are for the client, who purchased a product.")]),e._v(" "),t("li",[t("strong",[e._v("AllOrders.vue")]),e._v(" - History for all purchased products. Shows only the ID of the product and price in native coin of the blockchain.")]),e._v(" "),t("li",[t("strong",[e._v("CartPage.vue")]),e._v(" - Shows all products added to the cart. Contains information about product image and name, shop name, quantity and price. Quantity can be changed according to available quantity. Total price is calculated dynamically. There are two buttons: to remove a product from the cart and for the checkout, which redirects to another page where user can make the actual purchase.")]),e._v(" "),t("li",[t("strong",[e._v("CheckoutPage.vue")]),e._v(" - Shows information about the connected MetaMask account and shipping information fetched from the profile page of the user. Shipping information can be changed here and it will be saved in the Solid Pod of the user. There is a disconnect button to change the wallet and another button, which interacts with the smart contract.")]),e._v(" "),t("li",[t("strong",[e._v("ContactsView.vue")]),e._v(" - Show all contacts which are either added by searching a shop or when client requests an access to user's shop. WebId, My Shops and Their Shops is saved in "),t("code",[e._v("contacts.json")]),e._v(" in Solid Pod and are fetched from there. Online status is received from the Websocket server. There are buttons for accepting and rejecting a contact for each of the sections.")]),e._v(" "),t("li",[t("strong",[e._v("CreateItem.vue")]),e._v(" - Consists of different inputs for: "),t("code",[e._v("Name")]),e._v(", "),t("code",[e._v("Description")]),e._v(", "),t("code",[e._v("From date")]),e._v(", "),t("code",[e._v("To date")]),e._v(", "),t("code",[e._v("Currency")]),e._v(", "),t("code",[e._v("Price")]),e._v(", "),t("code",[e._v("Quantity")]),e._v(", "),t("code",[e._v("Shipping")]),e._v(", "),t("code",[e._v("Picture")]),e._v(". Every field is mandatory. Item information is saved in the Solid Pod.")]),e._v(" "),t("li",[t("strong",[e._v("CreateShop.vue")]),e._v(" - Consists of two inputs for "),t("code",[e._v("Shop name")]),e._v(" and "),t("code",[e._v("Cover picture")]),e._v(". Shop information is saved in the Solid Pod.")]),e._v(" "),t("li",[t("strong",[e._v("EditItemPage.vue")]),e._v(" - Very similar to the "),t("em",[e._v("CreateItem")]),e._v(" page. The only difference is that the old information about the product is showed in the inputs.")]),e._v(" "),t("li",[t("strong",[e._v("HomeView.vue")]),e._v(" - There are two sections when user is not logged in: section to search and connect to other shop and to log in to the Solid Pod, which can be done either with typing the URL and pressing the "),t("code",[e._v("Connect")]),e._v(" button or with selecting an existing Pod provider from the list. After the user has successfully logged in to the Solid Pod, a "),t("code",[e._v("Connect your wallet")]),e._v(" prompt appears on the main screen. There, the user should connect his MetaMask account to the web application. When connected, user is prompted with an notification where he should create an signature for authentication purposes. After the signature creation, he should log in again in order his signature be verified with the backend server.")]),e._v(" "),t("li",[t("strong",[e._v("Market.vue")]),e._v(" - Shows all shops in which user is accepted and has an access. There is a filter where user can view all the shops or he can select one or several of all.")]),e._v(" "),t("li",[t("strong",[e._v("MyInfo.vue")]),e._v(" - Shows the shipping information for the user, which consists of "),t("code",[e._v("First name")]),e._v(", "),t("code",[e._v("Last name")]),e._v(", "),t("code",[e._v("Phone number")]),e._v(" and "),t("code",[e._v("Address")]),e._v(". Every one of them can be changed and can be saved with the "),t("code",[e._v("Save")]),e._v(" button.")]),e._v(" "),t("li",[t("strong",[e._v("MySales.vue")]),e._v(" - Shows all created shops and a "),t("code",[e._v("View")]),e._v(" button beside them which if clicked, redirects the user to the current shop's active orders ("),t("code",[e._v("ShopOrders.vue")]),e._v(").")]),e._v(" "),t("li",[t("strong",[e._v("MyShops.vue")]),e._v(" - Shows all created shops, which are clickable (redirected to the "),t("code",[e._v("ShopItems.vue")]),e._v(" page) and a "),t("code",[e._v("Create shop")]),e._v(" button where user is redirected to "),t("code",[e._v("CreateShop.vue")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("ProfilePage.vue")]),e._v(" - Consists of a sidebar navigation panel with routes to "),t("code",[e._v("MyInfo.vue")]),e._v(", "),t("code",[e._v("ActiveOrders.vue")]),e._v(", "),t("code",[e._v("AllOrders.vue")]),e._v(", "),t("code",[e._v("MySales.vue")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("ShopItems.vue")]),e._v(" - Shows all created items for the current shop with short info: image, name, price, edit and delete button. Also, there are two buttons: "),t("code",[e._v("pen icon")]),e._v(" button, which opens a modal where user can edit the information about the current shop and "),t("code",[e._v("Create Item")]),e._v(" button, which redirects the user to "),t("code",[e._v("CreateItem.vue")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("ShopOrders.vue")]),e._v(" - Shows products which are purchased from one of the user's shop and are active (either there is not an agreement between parties or deadline has not passed). There is information about the "),t("code",[e._v("Product name")]),e._v(", "),t("code",[e._v("Price")]),e._v(", "),t("code",[e._v("Shop owner's decision")]),e._v(", "),t("code",[e._v("Client's decision")]),e._v(", "),t("code",[e._v("Deadline for the client's decision")]),e._v(", "),t("code",[e._v("Shipping information about the client")]),e._v(". Also, there are two buttons for order confirmation and for requesting a refund - both of them are for the shop owner.")])]),e._v(" "),t("h3",{attrs:{id:"components"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" Components")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("ItemElement.vue")]),e._v(" - Product from Market with image, price and "),t("code",[e._v("Add to Cart")]),e._v(" button. There is a check if product is in stock or not.")]),e._v(" "),t("li",[t("strong",[e._v("MyItemElement.vue")]),e._v(" - Product from the Shop of the user. It is very similar to the "),t("code",[e._v("ItemElement.vue")]),e._v(" with the difference that it has "),t("code",[e._v("Edit")]),e._v(" and "),t("code",[e._v("Delete")]),e._v(" buttons. When item is deleted, the image disappers and a "),t("code",[e._v("Deleted")]),e._v(" text shows on the screen.")]),e._v(" "),t("li",[t("strong",[e._v("OnlineCircle.vue")]),e._v(" - Shows the status of the contact in Contacts page. It can be in two colors: grey(offline) and green(online).")]),e._v(" "),t("li",[t("strong",[e._v("ProvidersDialog.vue")]),e._v(" - A list for fast selection of providers. Consists of localhost and some of the most popular third party Solid Pod providers according to "),t("a",{attrs:{href:"https://solidproject.org/users/get-a-pod",target:"_blank",rel:"noopener noreferrer"}},[e._v("Solid"),t("OutboundLink")],1),e._v(": "),t("a",{attrs:{href:"https://solidcommunity.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Solidcommunity"),t("OutboundLink")],1),e._v(", "),t("a",{attrs:{href:"https://solidweb.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Solidweb"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://start.inrupt.com/profile",target:"_blank",rel:"noopener noreferrer"}},[e._v("Inrupt Pod Spaces"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("RegisterModal.vue")]),e._v(" - Creates a Solid WebId and Pod Storage. Currently only supports "),t("a",{attrs:{href:"https://github.com/CommunitySolidServer/CommunitySolidServer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Community Solid Server"),t("OutboundLink")],1),e._v(" which should be started locally. The modal's inputs are: "),t("code",[e._v("Pod name")]),e._v(", "),t("code",[e._v("Email")]),e._v(", "),t("code",[e._v("Password")]),e._v(" and "),t("code",[e._v("Confirm")]),e._v(".")]),e._v(" "),t("li",[t("strong",[e._v("RequestingAccess.vue")]),e._v(" - A modal which only appears on the screen when a user wants to connect to a shop. It shows the connection requesting user's WebId and the shop where he wants to have an access. There are three buttons which are emitting different events: "),t("code",[e._v("Confirm")]),e._v(" emits "),t("code",[e._v("accepted")]),e._v(" event, "),t("code",[e._v("Reject")]),e._v(" emits "),t("code",[e._v("rejected")]),e._v(" event and "),t("code",[e._v("x")]),e._v(" on the upper right emits "),t("code",[e._v("pending")]),e._v(" event. The event is also broadcasted to the Websocket server of the connection requesting user. Regardless of the pressed button, the user will be added to the "),t("code",[e._v("contacts.json")]),e._v(" located in the Pod Storage and will appear in the "),t("code",[e._v("Contacts")]),e._v(" page.")]),e._v(" "),t("li",[t("strong",[e._v("ShopElement.vue")]),e._v(" - Shop card from MyShops page or Market page. It has only a clickable cover image of the shop. In the Market page if user does not have access anymore to the shop, in place of the cover image is a message and a button to remove the shop card.")]),e._v(" "),t("li",[t("strong",[e._v("ShopElementCreate.vue")]),e._v(" - Card with plus for Sshop or item creation.")]),e._v(" "),t("li",[t("strong",[e._v("ShopModal.vue")]),e._v(" - A modal with information about the current shop. The "),t("code",[e._v("Address")]),e._v(" and "),t("code",[e._v("Balance")]),e._v(" are dynamically loaded. "),t("code",[e._v("Withdraw")]),e._v(" button fetches all the balance from the Shop to the currently selected MetaMask account. "),t("code",[e._v("Copy Private Key")]),e._v(" copies the private key from the Solid Pod Storage. The user can change the shop name from "),t("code",[e._v("Name")]),e._v(" field. "),t("code",[e._v("Shop url")]),e._v(" and "),t("code",[e._v("Products")]),e._v(" fields are disabled. There is also a "),t("code",[e._v("Delete shop")]),e._v(" button.")]),e._v(" "),t("li",[t("strong",[e._v("TheLogin.vue")]),e._v(" - If the user is not logged in his Solid Pod, it shows an "),t("code",[e._v("Connect")]),e._v(" button which tries to connect to the Solid Pod provider from the input field and a "),t("code",[e._v("Select a pod provider")]),e._v(" button which opens the "),t("code",[e._v("ProvidersDialog.vue")]),e._v(' modal. When the user has logged in successfully there will appear a message depending on whether there are "containers" in the user\'s Solid Pod.')]),e._v(" "),t("li",[t("strong",[e._v("TheWallet.vue")]),e._v(" - There is only a "),t("code",[e._v("Connect")]),e._v(" button if the user has not connected his MetaMask to the web application. After a successfull connection there are a "),t("code",[e._v("Balance")]),e._v(" and "),t("code",[e._v("Address")]),e._v(" fields. "),t("code",[e._v("Disconnect")]),e._v(" button detaches the wallet from the web application.")])]),e._v(" "),t("h2",{attrs:{id:"p2p-connection-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#p2p-connection-manager"}},[e._v("#")]),e._v(" P2P Connection Manager")]),e._v(" "),t("p",[t("a",{attrs:{href:"#p2p-connection-manager"}},[t("img",{attrs:{src:o(267),alt:"P2P Connection Manager image"}})])]),e._v(" "),t("p",[e._v("P2P Connection Manager GitHub repository: "),t("a",{attrs:{href:"https://github.com/Applied-Blockchain-Lab/solid-websocket-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("Link"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"authentication-manager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#authentication-manager"}},[e._v("#")]),e._v(" Authentication manager")]),e._v(" "),t("p",[e._v("Authentication is required for event handlers that are used only for the shop owner's side. It is implemented with cryptographic signatures. Before the server is started the user should pass his MetaMask account's public key to the Websocket server. You can check the Websocket server's GitHub repository for more information."),t("br"),e._v("\nClient side (Vue.js web appplication) should create an object with the following content and send it to the Websocket server when emitting an authenticated event:")]),e._v(" "),t("ul",[t("li",[e._v("signature - A cryptographic text created (signed) with the private key of the MetaMask account.")]),e._v(" "),t("li",[e._v("message - An object which holds a Unix timestamp after which signature is not valid. Default value is "),t("strong",[e._v("1 hour")]),e._v(".")])]),e._v(" "),t("p",[e._v("The server performs some checks and according to the result sends a "),t("code",[e._v("blocked")]),e._v(" event and returns from the function or continues with the execution of the function.")]),e._v(" "),t("h3",{attrs:{id:"rate-limiter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rate-limiter"}},[e._v("#")]),e._v(" Rate limiter")]),e._v(" "),t("p",[e._v("Rate limiting is done through IP address of the client and by default one connection attempt should be made every 10 seconds. Rate limiter is implemented for every event handler. If there is a connection from same IP address in this duration, a "),t("code",[e._v("blocked")]),e._v(" event is sent to the client with the remaining milliseconds for the second attempt.")]),e._v(" "),t("h3",{attrs:{id:"ngrok-tunnel-creator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ngrok-tunnel-creator"}},[e._v("#")]),e._v(" Ngrok tunnel creator")]),e._v(" "),t("p",[e._v("Creates an Ngrok tunnel using the official APIs of the Ngrok. Ngrok is a cross-platform application that exposes local server ports to the Internet. The tunnel creation is optional and can be configured before starting the Websocket server. It is used mainly for bypassing CGNAT or other similar double NAT ISP setups.")]),e._v(" "),t("h2",{attrs:{id:"escrow-bulk-transactions-smart-contract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#escrow-bulk-transactions-smart-contract"}},[e._v("#")]),e._v(" Escrow Bulk Transactions Smart Contract")]),e._v(" "),t("p",[t("a",{attrs:{href:"#escrow-bulk-transactions-smart-contract"}},[t("img",{attrs:{src:o(268),alt:"Escrow Bulk Transactions image"}})])]),e._v(" "),t("p",[e._v("Escrow Bulk Transactions Smart Contract GitHub repository: "),t("a",{attrs:{href:"https://github.com/Applied-Blockchain-Lab/shops-bulk-transactions",target:"_blank",rel:"noopener noreferrer"}},[e._v("Link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("When the user buys something from a given shop, the web application ("),t("em",[e._v("Buyer")]),e._v(") calls "),t("code",[e._v("multiTransfer")]),e._v(" function which creates and saves order/orders information in the smart contract. He also transfers a required amount of tokens to the smart contract's address.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Buyer")]),e._v("/"),t("code",[e._v("Seller")]),e._v("/"),t("code",[e._v("Arbiter")]),e._v(' should make a "decision" in order to have an agreement about the purchased product/products. These three addresses control the payment and the smart contract needs the consent of two of them to either proceed the tokens to the seller or to the buyer. The buyer or the seller can change their decision from the web application anytime.')]),e._v(" "),t("p",[e._v("Decisions are encoded in the smart contract as:")]),e._v(" "),t("ul",[t("li",[e._v('0 - "no decision"')]),e._v(" "),t("li",[e._v('1 - "process transaction to the seller"')]),e._v(" "),t("li",[e._v('2 - "return tokens to the buyer"')])]),e._v(" "),t("p",[e._v("Possible cases when "),t("code",[e._v("Buyer")]),e._v(" orders an item:")]),e._v(" "),t("ul",[t("li",[e._v("If the "),t("code",[e._v("Buyer")]),e._v(" confirms the arrival of the product/products, the smart contract sends the tokens to the "),t("code",[e._v("Seller")]),e._v(".")]),e._v(" "),t("li",[e._v("The oracle sends a message that the order has arrived - the smart contract sends the tokens to the "),t("code",[e._v("Seller")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("Buyer")]),e._v(" requests a refund:\n"),t("ul",[t("li",[e._v("The "),t("code",[e._v("Seller")]),e._v(" agrees - the smart contract sends the tokens to the "),t("code",[e._v("Buyer")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("Seller")]),e._v(" does not agree - both of them wait for "),t("code",[e._v("Arbiter")]),e._v("'s decision.")])])]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("Seller")]),e._v(" requests a refund:\n"),t("ul",[t("li",[e._v("The "),t("code",[e._v("Buyer")]),e._v(" agrees - the smart contract sends the tokens to the "),t("code",[e._v("Seller")]),e._v(".")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("Buyer")]),e._v(" does not agree - both of them wait for "),t("code",[e._v("Arbiter")]),e._v("'s decision.")])])]),e._v(" "),t("li",[e._v("If by the end of the deadline the "),t("code",[e._v("Buyer")]),e._v(" does not confirm the arrival of the products, it is assumed that they arrived and the smart contract sends the tokens to the "),t("code",[e._v("Seller")]),e._v("'s address.")]),e._v(" "),t("li",[e._v("If the "),t("code",[e._v("Buyer")]),e._v(" asks for a deadline extension, he should open a dispute. Here can be two options: either the "),t("code",[e._v("Seller")]),e._v(" agrees to return the tokens or both of them wait for "),t("code",[e._v("Arbiter")]),e._v("'s decision.")])]),e._v(" "),t("p",[e._v("In current version "),t("code",[e._v("Arbiter")]),e._v("'s address is set when the contract is deployed, can not be changed and does not have an UI to interact with the smart contract. This will be changed in future releases.")]),e._v(" "),t("h2",{attrs:{id:"public-ip-resolver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public-ip-resolver"}},[e._v("#")]),e._v(" Public IP Resolver")]),e._v(" "),t("p",[t("strong",[e._v("IMPORTANT")]),e._v(": Only necessary if the Solid Pod is started locally (Community Solid Server) or the MyShop project is an Electron desktop application. Currently it is implemented as an Web application.")]),e._v(" "),t("p",[e._v("Public IP Resolver GitHub repository: "),t("a",{attrs:{href:"https://github.com/Applied-Blockchain-Lab/myshop-express-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("Link"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Default port is "),t("strong",[e._v("4000")]),e._v("."),t("br"),e._v("\nConsists of two endpoints:")]),e._v(" "),t("ul",[t("li",[e._v("/")])]),e._v(" "),t("p",[e._v("Serves a static file ("),t("code",[e._v("index.html")]),e._v(") from the "),t("code",[e._v("dist")]),e._v(" directory.")]),e._v(" "),t("ul",[t("li",[e._v("/address")])]),e._v(" "),t("p",[e._v("Fetches the public IP address of the machine using "),t("a",{attrs:{href:"https://www.ipify.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ipify"),t("OutboundLink")],1),e._v("'s API. Saves the IP address in "),t("code",[e._v(".address")]),e._v(" file and returns it to the user.")]),e._v(" "),t("h2",{attrs:{id:"reverse-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reverse-proxy"}},[e._v("#")]),e._v(" Reverse proxy")]),e._v(" "),t("p",[t("strong",[e._v("IMPORTANT")]),e._v(": Only necessary if the Solid Pod is started locally (Community Solid Server) or the MyShop project is an Electron desktop application. Currently it is implemented as an Web application.")]),e._v(" "),t("p",[e._v("Reverse proxy GitHub repository: "),t("a",{attrs:{href:"https://github.com/Applied-Blockchain-Lab/solid-proxy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Link"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Default port is "),t("strong",[e._v("9002")]),e._v("."),t("br"),e._v("\nIt is used to create a self-signed TLS certificate (when the user does not have a domain for the Community Solid Server and insted of that the public IP address is used) because Solid requires a secure protocol for the WebIDs. You can check the discussion: "),t("a",{attrs:{href:"https://github.com/CommunitySolidServer/CommunitySolidServer/discussions/1352",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unauthorized error when baseUrl is router IP address #1352"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);